<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_datasilos.ExecuteBusinessRule</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>This function serves as the main entry point to the DataSilos application and should be called from the script block of a business rule which responds to insert, update and query operations.</description>
        <name>ExecuteBusinessRule</name>
        <script><![CDATA[function ExecuteBusinessRule(current, previous)
{
	var GetStringValue = x_snc_devtools.GetStringValue;
	var RenderValue = x_snc_devtools.RenderValue;
	var GetBoolValue = x_snc_devtools.GetBoolValue;
	var BusinessRuleGetOperation = x_snc_devtools.BusinessRuleGetOperation;
	var IsValidDatabaseView = x_snc_devtools.IsValidDatabaseView;
	
	
	function Log(strText)
	{
		x_snc_datasilos.Log('ExecuteBusinessRule: '+strTable+': '+strOperation+': '+strText);
	}
	function Debug(strText)
	{
		x_snc_datasilos.Debug('ExecuteBusinessRule: '+strTable+': '+strOperation+': '+strText);
	}
	
	var strTable = current.getRecordClassName(); 
	
	var strOperation = BusinessRuleGetOperation(current);
	
	if (strOperation == 'query')
	{
		if (IsActive() == false)
		{
			return;
		}
		
		if (strTable == 'sysapproval_approver')
		{
			return;
		}

		if (gs.hasRole('admin') == true)
		{
			//Debug('User has the admin role. Filters are not applied.');
			return;
		}		
		if (IsUserSentinel() == true)
		{
			//Debug('User has the sentinel role. Filters are not applied.');
			return;
		}		
		
		if (IsTableSupported(strTable) == false)
		{
			if (IsDatabaseViewsActive() == false)
			{
				return;
			}

			Debug('We are called from a database view!!!');
			var grDbView = new GlideRecord('sys_db_view');
			grDbView.addQuery('name',strTable);
			grDbView.query();
			if (grDbView.next() == false)
			{
				Debug('"'+strTable+'" is NOT supported and NOT a database view: we do nothing');
				return;
			}
			else
			{
				Debug('Database view: '+strTable+' is a database view: '/*+RenderValue(grDbView)*/);
				var grDbViewTable = new GlideRecord('sys_db_view_table');
				grDbViewTable.addQuery('view',grDbView.sys_id);
				grDbViewTable.query();
				while (grDbViewTable.next())
				{
					var strViewTable = ''+grDbViewTable.table;
					if (IsTableActive(strViewTable) == true)
					{
						var strPrefix = ''+grDbViewTable.variable_prefix;
						Debug('Database view: '+strTable+': Found active table: '+strViewTable+': Prefix: '+strPrefix);
						
						var bLeftJoin = GetBoolValue(grDbViewTable.left_join);
						var bWhereClause = GetBoolValue(GetStringValue(grDbViewTable.where_clause).length);
						
						var bAllowEmptySysId = false;
						if (bLeftJoin && bWhereClause)
						{
							bAllowEmptySysId = true;
						}
						
						PrepareQuery(current,strViewTable,strPrefix,false,bAllowEmptySysId);
						
						/*var strPrefix = ''+grDbViewTable.variable_prefix;

						var strRelatedRecordSysId = record.getValue(strPrefix+'_sys_id'); 

						var grRelatedRecord = new GlideRecord(strViewTable);
						if (grRelatedRecord.get(strRelatedRecordSysId) == false)
						{
							Debug('Database view: '+strTable+': returns false');
							return false;   
						}*/
					}
				}
				Debug('New query: '+current.getEncodedQuery());
				return;
			}

		}
		
		if (IsTableActive(strTable) == false)
		{
			return;
		}

		var bAvoidExpensiveQueries = GetBoolValue(GetConfigValue('tables',strTable,'avoid_expensive_queries'));
		if (bAvoidExpensiveQueries == true)
		{
			var strEncodedQuery = GetStringValue(current.getEncodedQuery());

			if (IsExpensiveQuery(strTable,strEncodedQuery) == true)
			{
				//Debug('The query has been identified as "expensive". No filtering takes place:\n'+current.getEncodedQuery());
				return;
			}
		}
		
		PrepareQuery(current);
		//Debug('Query updated: '+current.getEncodedQuery());
		return;
	}

	
	if (IsTableSupported(strTable) == false)
	{
		return;
	}
	
	if (IsUserGhost() == true)
	{
		//Debug('User has the x_snc_datasilos.ghost role. No changes are made during insert or update.');
		return;
	}
	
	if (RecordGetGhostValue(current) == true)
	{
		//Debug('The record is flagged as a ghost. No changes are made during insert or update.');
		return;
	}
		
	if (strOperation == 'insert')
	{
		RecordInitialize(current);
		//Debug('Record initialized');
		return;
	}

	if (strOperation == 'update')
	{
		RecordUpdate(current);
		//Debug('Record updated');
		return;
	}
	
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-04-02 12:55:57</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>37658c3bdbf78450ba15a353059619e9</sys_id>
        <sys_mod_count>135</sys_mod_count>
        <sys_name>ExecuteBusinessRule</sys_name>
        <sys_package display_value="DataSilos" source="x_snc_datasilos">dafbffebdbb78450ba15a353059619eb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="DataSilos">dafbffebdbb78450ba15a353059619eb</sys_scope>
        <sys_update_name>sys_script_include_37658c3bdbf78450ba15a353059619e9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-06-23 17:10:29</sys_updated_on>
    </sys_script_include>
</record_update>
