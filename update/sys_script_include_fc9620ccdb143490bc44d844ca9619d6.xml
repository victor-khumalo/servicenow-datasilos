<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_datasilos.MaintenanceDatabaseViews</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Prepares and adapts the configuration of existing database views on tables in scope.</description>
        <name>MaintenanceDatabaseViews</name>
        <script><![CDATA[function MaintenanceDatabaseViews()
{
	var GetRecord = x_snc_devtools.GetRecord;
	var IsValidRecord = x_snc_devtools.IsValidRecord;
	var GetStringValue = x_snc_devtools.GetStringValue;
	var GetBoolValue = x_snc_devtools.GetBoolValue; 
	var RenderValue = x_snc_devtools.RenderValue;
	var GetValue = x_snc_devtools.GetValue;
	var GetArrayValue = x_snc_devtools.GetArrayValue;
	var GlideRecordInsert = x_snc_devtools.GlideRecordInsert;
	var GlideRecordUpdate = x_snc_devtools.GlideRecordUpdate;
	var GlideRecordDelete = x_snc_devtools.GlideRecordDelete;
	var RecordSetValue = x_snc_devtools.RecordSetValue;
	var GetHash = x_snc_devtools.GetHash;

	function Log(strText)
	{
		x_snc_datasilos.Log('MaintenanceDatabaseViews: '+strText);
	}
	function Debug(strText)
	{
		//x_snc_datasilos.Debug('MaintenanceDatabaseViews: '+strText);
	}
	function MakeBusinessRuleName(strDatabaseViewName)
	{
		var strPrefix = 'DataSilos - ';
		strDatabaseViewName = GetStringValue(strDatabaseViewName);
		var strDatabaseViewNameStripped = strDatabaseViewName;
		if (strDatabaseViewName.length > (40 - strPrefix.length))
		{
			var nHashLength = 4;
			var strHash = GetHash(strDatabaseViewName);
			strDatabaseViewNameStripped = strDatabaseViewNameStripped.substr(0, (40 - strPrefix.length - nHashLength));
			strDatabaseViewNameStripped += strHash.substr(0,nHashLength);
		}
		return strPrefix + strDatabaseViewNameStripped;
	}
	
	if (GetBoolValue(GetConfigValue('database_views','active')) == true)
	{
		Log('Database views protection is active. Adding all fields and business rules where necessary.');
		// Database view protection is active, so we need to add fields to those tables which already have fields defined
		
		RecordSetValue('sys_script','ccaf8afec3302200f7d1ca3adfba8f14','active',false);  // Deactivate the "Reject before-Q for out-of-scope tables" business rule

		var aTables = GetAllSupportedTables();
		for (var nTable = 0; nTable < aTables.length; nTable++)
		{
			var strTable = aTables[nTable];

			var grDbViewTable = new GlideRecord('sys_db_view_table');
			grDbViewTable.addQuery('table',strTable);
			grDbViewTable.addQuery('active','=','true');
			grDbViewTable.query();
			while (grDbViewTable.next())
			{
				var strDbViewSysId = grDbViewTable.view;
				var grDbView = GetRecord('sys_db_view',strDbViewSysId);
				if (IsValidRecord(grDbView))
				{
					var strDbViewName = GetStringValue(grDbView.name);
					
					var strBusinessRuleName = MakeBusinessRuleName(strDbViewName);

					//Debug('MaintenanceDatabaseViews: '+strDbViewName);

					var grBR = new GlideRecord('sys_script');
					//Debug('MaintenanceDatabaseViews: '+RenderValue(grBR));


					grBR.addQuery('name','=',strBusinessRuleName);
					grBR.addQuery('collection','=',strDbViewName);
					grBR.addQuery('sys_scope','=','global');
					grBR.query();
					var bInsert = false;
					if (grBR.next() == false)
					{
						bInsert = true;					
						grBR.initialize();
					}
					grBR.x_snc_datasilos_created = true;
					grBR.name = strBusinessRuleName;
					grBR.collection = strDbViewName;
					grBR.sys_scope = 'global';
					grBR.active = 'true';
					grBR.when = 'before';
					grBR.advanced = 'true';
					grBR.action_query = 'true';
					grBR.script = "" 
						+"(function executeRule(current, previous)"
						+"{"
						+"   x_snc_datasilos.ExecuteBusinessRule(current, previous);"
						+"})(current, previous);";
					if (bInsert == true)
					{
						GlideRecordInsert(grBR);
					}
					else
					{
						GlideRecordUpdate(grBR);
					}
				}


				var strDbViewTableSysId = GetStringValue(grDbViewTable.sys_id);

				var grFields = new GlideRecord('sys_db_view_table_field');
				grFields.addQuery('view_table','=',strDbViewTableSysId);
				grFields.query();
				if (grFields.getRowCount() > 0)
				{
					function AddField(strField)
					{
						var grField = new GlideRecord('sys_db_view_table_field');

						grField.addQuery('view_table','=',strDbViewTableSysId);
						grField.addQuery('field','=',strField);
						grField.addQuery('table','=',grDbViewTable.table);
						grField.query();
						if (grField.getRowCount() == 0)
						{
							grField.initialize();
							grField.view_table = strDbViewTableSysId;
							grField.field = strField;
							grField.sys_scope = grDbViewTable.sys_scope;
							grField.table = grDbViewTable.table;
							grField.x_snc_datasilos_created = true;
							GlideRecordInsert(grField);
						}
					}

					AddField(GetScopeFromTable(strTable)+'_ghost');
					AddField(GetScopeFromTable(strTable)+'_global');
					AddField(GetScopeFromTable(strTable)+'_group_whitelist');
					AddField(GetScopeFromTable(strTable)+'_security_clearance');
					AddField(GetScopeFromTable(strTable)+'_supervisor_whitelist');
					AddField(GetScopeFromTable(strTable)+'_last_maintenance');

					// Iterate over referenced tables
					var aInstantAccess = GetConfigValue('tables',strTable,'columns','instant_access');
					Object.keys(aInstantAccess).forEach( function(strReferencedTable)
					{
						var aFields = GetArrayValue(GetConfigValue('tables',strTable,'columns','instant_access',strReferencedTable));
						for (nField = 0; nField < aFields.length; nField++)
						{
							AddField(aFields[nField]);
						}
					});
				}
			}

		}
	}
	else
	{
		Log('Database views protection is inactive. Removing all fields and business rules that were added by DataSilos.');

		var grField = new GlideRecord('sys_db_view_table_field');
		grField.addQuery('x_snc_datasilos_created','=','true');
		grField.query();
		while (grField.next())
		{
			GlideRecordDelete(grField);
		}			
		
		var grBR = new GlideRecord('sys_script');

		grBR.addQuery('x_snc_datasilos_created','=','true');
		grBR.query();
		while (grBR.next())
		{
			GlideRecordDelete(grBR);
		}
		
		
		
	}
	Log('Completed.');

	
	
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-05-18 12:45:13</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>fc9620ccdb143490bc44d844ca9619d6</sys_id>
        <sys_mod_count>23</sys_mod_count>
        <sys_name>MaintenanceDatabaseViews</sys_name>
        <sys_package display_value="DataSilos" source="x_snc_datasilos">dafbffebdbb78450ba15a353059619eb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="DataSilos">dafbffebdbb78450ba15a353059619eb</sys_scope>
        <sys_update_name>sys_script_include_fc9620ccdb143490bc44d844ca9619d6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-06-22 08:13:41</sys_updated_on>
    </sys_script_include>
</record_update>
