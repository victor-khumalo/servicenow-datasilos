<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_datasilos.GetOptimizationStatus</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Returns an object with current status information about the database optimization.</description>
        <name>GetOptimizationStatus</name>
        <script><![CDATA[function GetOptimizationStatus(strUserSysId)
{
	var GetStringValue = x_snc_devtools.GetStringValue;
	var GetIntegerValue = x_snc_devtools.GetIntegerValue;
	var GetValue = x_snc_devtools.GetValue;
	var GetKeys = x_snc_devtools.GetKeys;
	var Debug = x_snc_devtools.Debug;
	var stopwatch = new x_snc_devtools.StopWatch();

	strUserSysId = GetStringValue(strUserSysId);
	
	var strPseudoSysId = '12345678901234567890123456789012';
		
	var status = GetConfig();

	var aTables = GetKeys(GetValue(status,'tables'));
	for (var nTable = 0; nTable < aTables.length; nTable++)
	{
		var strTable = aTables[nTable];
		var table = GetValue(status,'tables',strTable); 

		var queries = [];

		var grQuery = new GlideRecord(strTable);
		grQuery.addActiveQuery();
		PrepareQueryInternal(grQuery, strTable, '', strPseudoSysId, false, [strPseudoSysId], [strPseudoSysId], 0);
		stopwatch.Start();
		grQuery.query();
		stopwatch.Stop();
		var nMiliSeconds = stopwatch.GetMilliSeconds();
		stopwatch.Reset();

		var query = {
			'name'        : 'List Active',
			'encodedquery': grQuery.getEncodedQuery(),
			'miliseconds' : nMiliSeconds
		};
		queries.push(query);
		
		
		var grQuery = new GlideRecord(strTable);
		PrepareQueryInternal(grQuery, strTable, '', strPseudoSysId, false, [strPseudoSysId], [strPseudoSysId], 0);
		stopwatch.Start();
		grQuery.query();
		stopwatch.Stop();
		var nMiliSeconds = stopwatch.GetMilliSeconds();
		stopwatch.Reset();

		var query = {
			'name'        : 'List All',
			'encodedquery': grQuery.getEncodedQuery(),
			'miliseconds' : nMiliSeconds
		};
		queries.push(query);
	
		
		var grQuery = new GlideRecord(strTable);
		grQuery.orderBy(GetScopeFromRecord(grQuery)+'_last_maintenance');
		grQuery.setLimit(1);
		stopwatch.Start();
		grQuery.query();
		stopwatch.Stop();
		var nMiliSeconds = stopwatch.GetMilliSeconds();
		stopwatch.Reset();

		var query = {
			'name'        : 'Backmarker',
			'encodedquery': grQuery.getEncodedQuery(),
			'miliseconds' : nMiliSeconds
		};
		queries.push(query);
		
		table['queries'] = queries;
	}
	
	return status;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-06-16 09:43:44</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>0e359159db3870583c6c09c2ba9619a5</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>GetOptimizationStatus</sys_name>
        <sys_package display_value="DataSilos" source="x_snc_datasilos">dafbffebdbb78450ba15a353059619eb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="DataSilos">dafbffebdbb78450ba15a353059619eb</sys_scope>
        <sys_update_name>sys_script_include_0e359159db3870583c6c09c2ba9619a5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-06-25 09:29:08</sys_updated_on>
    </sys_script_include>
</record_update>
